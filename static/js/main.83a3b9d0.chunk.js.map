{"version":3,"sources":["0.jpg","1.jpg","2.jpg","3.jpg","4.jpg","5.jpg","6.jpg","Words.js","Hangman.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","englishWords","randomWord","Math","floor","random","length","Hangman","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","nWrong","guessed","Set","answer","handleGuess","bind","assertThisInitialized","reset","_this2","split","map","ltr","has","evt","target","value","setState","st","add","includes","_this3","react_default","a","createElement","onClick","disabled","gameOver","maxWrong","isWinner","guessedWord","join","altText","concat","gameState","generateButtons","className","alt","src","images","id","Component","defaultProps","img0","img1","img2","img3","img4","img5","img6","App","src_Hangman_0","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.83a3b9d0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/0.db9097e8.jpg\";","module.exports = __webpack_public_path__ + \"static/media/1.fbff4784.jpg\";","module.exports = __webpack_public_path__ + \"static/media/2.c4ea9528.jpg\";","module.exports = __webpack_public_path__ + \"static/media/3.62a781c8.jpg\";","module.exports = __webpack_public_path__ + \"static/media/4.0f8ca81e.jpg\";","module.exports = __webpack_public_path__ + \"static/media/5.1b557aa7.jpg\";","module.exports = __webpack_public_path__ + \"static/media/6.c80394c2.jpg\";","var englishWords = [\r\n\"awkward\",\r\n\"bagpipes\",\r\n\"banjo\",\r\n\"bungler\",\r\n\"croquet\",\r\n\"crypt\",\r\n\"dwarves\",\r\n\"fervid\",\r\n\"fishhook\",\r\n\"fjord\",\r\n\"gazebo\",\r\n\"gypsy\",\r\n\"haiku\",\r\n\"haphazard\",\r\n\"hyphen\",\r\n\"ivory\",\r\n\"jazzy\",\r\n\"jiffy\",\r\n\"jinx\",\r\n\"jukebox\",\r\n\"kayak\",\r\n\"kiosk\",\r\n\"klutz\",\r\n\"memento\",\r\n\"mystify\",\r\n\"numbskull\",\r\n\"ostracize\",\r\n\"oxygen\",\r\n\"pajama\",\r\n\"phlegm\",\r\n\"pixel\",\r\n\"polka\",\r\n\"quad\",\r\n\"quip\",\r\n\"rhythmic\",\r\n\"rogue\",\r\n\"sphinx\",\r\n\"squawk\",\r\n\"swivel\",\r\n\"toady\",\r\n\"twelfth\",\r\n\"unzip\",\r\n\"waxy\",\r\n\"wildebeest\",\r\n\"yacht\",\r\n\"zealous\",\r\n\"zigzag\",\r\n\"zippy\",\r\n\"zombie\",\r\n];\r\n\r\nfunction randomWord() {\r\n    return englishWords[Math.floor(Math.random() * englishWords.length)];\r\n}\r\n\r\nexport { randomWord };","import React, { Component } from 'react';\r\nimport './Hangman.css';\r\nimport { randomWord } from './Words';\r\nimport img0 from './0.jpg';\r\nimport img1 from './1.jpg';\r\nimport img2 from './2.jpg';\r\nimport img3 from './3.jpg';\r\nimport img4 from './4.jpg';\r\nimport img5 from './5.jpg';\r\nimport img6 from './6.jpg';\r\n\r\nclass Hangman extends Component {\r\n    static defaultProps = {\r\n        maxWrong: 6,\r\n        images: [img0, img1, img2, img3, img4, img5, img6]\r\n    };\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { nWrong: 0, guessed: new Set(), answer: randomWord() };\r\n        this.handleGuess = this.handleGuess.bind(this);\r\n        this.reset = this.reset.bind(this);\r\n    }\r\n\r\n    guessedWord(){\r\n        return this.state.answer.split(\"\")\r\n        .map(ltr => (this.state.guessed.has(ltr) ? ltr: \"_\"));\r\n    }\r\n\r\n    handleGuess(evt){\r\n        let ltr = evt.target.value;\r\n        this.setState(st => ({\r\n            guessed: st.guessed.add(ltr),\r\n            nWrong: st.nWrong + (st.answer.includes(ltr) ? 0 : 1)\r\n        }));\r\n    }\r\n\r\n    reset(){\r\n        this.setState({\r\n            nWrong: 0,\r\n            guessed: new Set(),\r\n            answer: randomWord()\r\n        });\r\n    }\r\n\r\n    generateButtons(){\r\n        return \"abcdefghijklmnopqrstuvwxyz\".split(\"\").map(ltr => (\r\n            <button\r\n            value={ltr}\r\n            onClick={this.handleGuess}\r\n            disabled={this.state.guessed.has(ltr)}>\r\n            {ltr}\r\n            </button>\r\n        ));\r\n    }\r\n\r\n    render(){\r\n        const gameOver = this.state.nWrong >= this.props.maxWrong;\r\n        const isWinner = this.guessedWord().join(\"\") === this.state.answer;\r\n        const altText = `${this.state.nWrong}/${this.state.maxWrong} wrong guesses`;\r\n        let gameState = this.generateButtons();\r\n        if(isWinner) gameState= 'You Win!'\r\n        if(gameOver) gameState= 'You Lose'\r\n        return (\r\n            <div className='Hangman'>\r\n                <h1>Hangman</h1>\r\n                <img alt={altText} src={this.props.images[this.state.nWrong]} />\r\n                <p>Wrong Guesses:{this.state.nWrong}</p>\r\n                <p className='Hangman-word'>{!gameOver ? this.guessedWord() : this.state.answer}</p>\r\n                <p className='Hangman-btns'>{gameState}</p>\r\n                <button id='reset' onClick={this.reset}>New Game</button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Hangman;","import React, { Component } from 'react';\nimport './App.css';\nimport Hangman from './Hangman';\n\nclass App extends Component {\n  render(){\n    return (\n      <div className=\"App\">\n        <Hangman />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}